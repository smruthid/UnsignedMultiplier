# Maintainer    ntwong0
# Version       1.4.2019-08-28-1641

# Purpose
#    This script writes the attributes and parameters of the current Vivado project out. 
#    These values are saved to the create_project.tcl script. This resulting .tcl script
#    may be used to regenerate the project in another filesystem location.

# git repo assumption
#   This script is in the same directory as the project .xpr file

# Generate the base create_project.tcl script
set script_directory [file dirname [file normalize [info script]]]
set repo_root $script_directory/..
cd [get_property DIRECTORY [current_project]]
write_project_tcl -force -no_copy_sources -use_bd_files $script_directory/create_project.tcl

# The following code tackles several shortcomings with the vanilla create_project.tcl generated by write_project_tcl
# 1. The create_project.tcl script attempts to create the project relative to Vivado's current working directory. To correct this, the CWD will be relative to the script's location, which is at the repo's top-level.
# 2. The create_project.tcl script attempts to create a folder at the current working directory named after the project, and the project .xpr descriptor file and its resources will be populated there. The created resources are copied from the repo's top-level. To correct this, the .xpr will be moved to the top-level, and the newly-created folder will be removed.
# 3. (Not addressed) Files imported but not copied to the Vivado project are imported based on their location relative to the current working directory. Since these files are likely outside the repo, addressing this point would increase complexity. Instead, we rely on the end-user to copy as they import the sources to their Vivado project.

# Initial setup
set timestamp [clock format [clock seconds] -format {%Y%m%d%H%M%S}]
set filename "create_project.tcl"
set temp     $filename.new.$timestamp
set backup   $filename.bak.$timestamp
set in  [open $filename r]
set out [open $temp     w]

# Tackling #1
# a. Read the base file, copying each line to the temporary file.
# b. If the target line is found, correct it 
# c. For each line that is read from infile, copy either the original or the augmented line to outfile

# (a)
while {[gets $in line] != -1} {
    # (b)
    if {[regexp {^set origin_dir \"\.\"} "$line"]} {
      regsub {\"\.\"} $line {[file dirname [file normalize [info script]]]} line
      puts $out $line
      set line {cd $origin_dir}
    }
    # (c)
    puts $out $line
}
close $in

# Tackling #2
puts $out ""
puts $out {close_project}
puts $out {file copy -force ${_xil_proj_name_}/${_xil_proj_name_}.xpr ${_xil_proj_name_}.xpr}
puts $out {file delete -force ${_xil_proj_name_}}
puts $out {open_project ${_xil_proj_name_}.xpr}
close $out

# Rename the temporary file as the base file
# Also prepare a backup in case the renaming fails
if {[catch [file copy $filename $backup]] == 0} {
    if {[catch [file rename -force $temp $filename ]] == 0} {
        file delete $backup 
        puts "Script create_project.tcl is ready."
    } else {
        puts "Could not perform renaming, script saved as $temp"
    }
} else {
    puts "Could not make a copy, script saved as $temp"
}
